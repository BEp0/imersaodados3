# -*- coding: utf-8 -*-
"""dia02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OgIjr_sfjBlH2WFGjNO8K_GBKuCE04o9
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

url_dados = 'https://github.com/BEp0/imersaodados3/blob/main/dados/dados_experimentos.zip?raw=true'

dados = pd.read_csv(url_dados, compression = 'zip')

dados

# reatribuindo o nome da coluna
mapa = {'droga':'composto'}
dados.rename(columns=mapa, inplace=True) # inplace substitui o data frame, não roda as cedulas de cima
dados

cod_compostos = dados['composto'].value_counts().index[0:5] # contém somente os primeiros 5 compostos

sns.countplot(x='composto', data=dados) # conta os dados, vezes, e plota a informação -> assim não me mostra muita coisa

dados.query('composto in @cod_compostos') # @ informa que foi declarando anteriormente

sns.set() # ativa padrão do sns
plt.figure(figsize=(10, 8)) # define tamanho (x, y)
ax = sns.countplot(x='composto', data=dados.query('composto in @cod_compostos'))# nos mostra a tabela anterior, mas em gráfico e armazena na variavel
ax.set_title('Top 5 compostos', fontsize=18) # adiciona titulo no grafico criado

plt.show() # tira o Text

sns.set() # ativa padrão do sns
plt.figure(figsize=(10, 8)) # define tamanho (x, y)
ax = sns.countplot(x='composto', data=dados.query('composto in @cod_compostos'), order=cod_compostos)# nos mostra a tabela anterior, mas em gráfico e armazena na variavel
ax.set_title('Top 5 compostos', fontsize=18) # adiciona titulo no grafico criado
ax.set_xlabel('Composto', fontsize=18) # muda o texto do x
ax.set_ylabel('Frequência', fontsize=18) # muda o texto do y
plt.show() # tira o Text

len(dados['g-0'].unique()) #unique() -> elementos únicos

dados['g-0'].min()

dados['g-0'].max()

dados['g-0'].hist(bins = 80) # histograma, nosso gráfico é uma curva normal
plt.show()

dados['g-19'].hist(bins = 80) # histograma, nosso gráfico é uma curva normal
plt.show()

dados.describe()

dados[['g-0', 'g-1']] # ruim para todos os elementos

dados.loc[0:, 'g-0':'g-771'].describe().T # .T transformou as colunas g-0... em linhas

dados.loc[0:, 'g-0':'g-771'].describe().T['mean'].hist(bins = 30)
plt.show()

dados.loc[0:, 'g-0':'g-771'].describe().T['min'].hist(bins = 30)
plt.show()

dados.loc[0:, 'g-0':'g-771'].describe().T['max'].hist(bins = 30)
plt.show()

#1º desafio:
cod_compostos = dados['composto'].value_counts().index[0:5] # contém somente os primeiros 5 compostos
#cod_compostos = dados['composto'].value_counts().index[5:0:-1] # decrescente

dados.query('composto in @cod_compostos') # @ informa que foi declarando anteriormente

sns.set() # ativa padrão do sns
plt.figure(figsize=(10, 8)) # define tamanho (x, y)

ax = sns.countplot(x='composto', data=dados.query('composto in @cod_compostos'), order=cod_compostos)

# ----- continuar a aula -----

#1º desafio:
cod_compostos = dados['composto'].value_counts().index[5:0:-1] # decrescente

dados.query('composto in @cod_compostos') # @ informa que foi declarando anteriormente

sns.set() # ativa padrão do sns
plt.figure(figsize=(10, 8)) # define tamanho (x, y)

ax = sns.countplot(x='composto', data=dados.query('composto in @cod_compostos'), order=cod_compostos)

# 2º desafio:
cod_compostos = dados['composto'].value_counts().index[0:5]

dados.query('composto in @cod_compostos') # @ informa que foi declarando anteriormente

sns.set()
plt.figure(figsize=(10, 8))

ax = sns.countplot(x='composto', data=dados.query('composto in @cod_compostos'), order=cod_compostos)
ax.set_title('Top 5 compostos', fontsize=25) # adiciona titulo no grafico criado
ax.set_xlabel('Compostos', fontsize=18, color='gray')
ax.set_ylabel('Frequência', fontsize=18, color='gray')

plt.show()

# desafio 03:

celulas = dados.loc[:, 'c-0':'c-99'].describe().T['mean']

plt.figure(figsize=(10, 8))

hist = sns.histplot(data=celulas)
hist.set_title('celulas', fontsize=25, color='gray')
hist.set_xlabel('Celulas', fontsize=18, color='gray')
hist.set_ylabel('Contador', fontsize=18, color='gray')

plt.show()